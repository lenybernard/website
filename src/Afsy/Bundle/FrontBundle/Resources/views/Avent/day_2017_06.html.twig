{% extends 'AfsyFrontBundle:Avent:day.html.twig' %}

{% set year = 2017 %}

{% block article_title "Jour 6 - HEADLESS IS MORE (sans-t√™te est plus)" %}

{% block article_content %}
    <style type="text/css">
        i {
            font-family: sans-serif;
        }
    </style>
    <h1>HEADLESS IS MORE (sans-t√™te c'est plus)</h1>
    <img src="http://i.imgur.com/ljT1H10.gif"/>
    <h1>Headless is more</h1>
    <h2>Introduction</h2>
    <p>Il existe bon nombre de CMS bas√©s ou connectables avec un projet Symfony mais il existe un genre relativement r√©cent de CMS dont l‚Äôapproche <strong>as a service</strong> promet rapidit√©, productivit√©, ergonomie, scalabilit√©, inter-op√©rabilit√© et la parallelisation des canaux de communication.</p>
    <p>La philosophie de base des CMS headless est de d√©centraliser la gestion du contenu afin d‚Äô√™tre capable de consommer celui-ci via les diff√©rents canaux qui peuvent en avoir besoin. On se rapproche ainsi du principe de s√©paration des responsabilit√©s, en s√©parant le contenu, qui rel√®ve de la responsabilit√© du marketing, de sa repr√©sentation, responsabilit√© des designers et d√©veloppeurs.</p>
    <p>Contentful est probablement le cms headless le plus cher du march√© mais c'est √©galement d'apr√®s moi le plus complet en cette fin d'ann√©e 2017. D'ailleurs, hasard du calendrier je vous le jure, ils viennent d'annoncer une nouvelle <a href="https://techcrunch.com/2017/12/04/contentful-a-stripe-for-content-management-raises-28m-led-by-general-catalyst/">lev√©e de fonds de 28M$</a>, voil√† de quoi distancer encore plus les concurrents.</p>
    <p>Pour cette raison, j'ai d√©cid√© de vous le pr√©senter aujourd'hui n√©anmoins, si vous voulez continuer le voyage apr√®s cet article, je vous conseille d'aller voir du c√¥t√© de <a href="https://github.com/directus">Directus</a>, de <a href="https://prismic.io/">Prismic</a>, <a href="https://getcockpit.com/">Cockpit</a>, <a href="https://graphcms.com/">GraphCMS</a> que j'ai d√©couvert derni√®rement et allez voir l'annuaire des CMS Headless: <a href="https://headlesscms.org">https://headlesscms.org</a>.</p>
    <p>Alors c'est parti, je vous emm√®ne avec moi, on va refondre le site de l‚ÄôAFSY afin de lui offrir un syst√®me puissant de gestion de contenu (ux, versionnement, relecture, publication, rss, √©dition simultan√©e/collaborative des √©diteurs...).</p>
    <p>A tout moment, vous pourrez aller voir le <a href="https://github.com/lenybernard/afsy.fr">d√©p√¥t</a> compagnon sur lequel j'ai fait mes commits en pr√©parant cet article ! De plus, vous pouvez voir ce que ca donne ici: <a href="https://afsy.troopers.agency">https://afsy.troopers.agency</a> !</p>
    <p>Tout d‚Äôabord, d√©finissons bri√®vement les fonctionnalit√©s attendues et qui nous serviront de sommaire:</p>
    <ul>
        <li>une page d‚Äôaccueil pour pr√©senter l‚Äôafsy, les objectifs, les √©v√©nements (pass√©s et √† venir)</li>
        <li>un blog de qualit√© filtrable par cat√©gorie avec une cat√©gorie sp√©ciale ‚Äúcalendrier de l‚Äôavent‚Äù (un article par jour et template sp√©cial)</li>
        <li>un formulaire pour proposer un √©v√©nement</li>
    </ul>
    <h2>TL;DR / Sommaire</h2>
    <ul>
        <li><a href="#1">1. Afficher une page d'accueil</a>

            <ul>
                <li><a href="#1.1">Cr√©ation d'un projet vide</a></li>
                <li><a href="#1.2">Cr√©ation de l'espace Contenful</a></li>
                <li><a href="#1.3">Retour √† Symfony</a></li>
                <li><a href="#1.3.configuration">configuration</a></li>
                <li><a href="#1.3.controller-view">Contr√¥leur + Vue</a></li>
                <li><a href="#1.3.layout">L'organisation du contenu dans les pages</a></li>
                <li><a href="#1.3.layout.goals">Les objectifs</a></li>
                <li><a href="#1.3.layout.events">Les √©v√©nements</a></li>
            </ul></li>
        <li><a href="#2">2. Le blog</a>

            <ul>
                <li><a href="#2.1">Un blog de base</a></li>
                <li><a href="#2.1.index">Index du blog</a></li>
                <li><a href="#2.1.show">Vue d'un article</a></li>
                <li><a href="#2.1.listByCateg-avent">Liste des articles par cat√©gorie + calendrier de l'avent</a></li>
            </ul></li>
        <li><a href="#3">3 Soumettre des √©v√©nements depuis le site</a>

            <ul>
                <li><a href="#3.1">Architecture:</a></li>
                <li><a href="#3.1.sdk-management">Installation du sdk contentful-management</a></li>
                <li><a href="#3.1.clientServiceDeclaration">D√©claration du service</a></li>
                <li><a href="#3.1.modelCreation">Cr√©ation du model</a></li>
                <li><a href="#3.1.form">Cr√©ation du formulaire</a></li>
                <li><a href="#3.1.controller-handler-dataTransformer">Cr√©ation de l'action de controller + Handler + DataTransformer</a></li>
            </ul></li>
        <li><a href="#conclusion">Conclusion</a>

            <ul>
                <li><a href="#conclusion-bundle">Le bundle ContentfulBundle</a></li>
                <li><a href="#conclusion-pricing">Le prix</a></li>
                <li><a href="#conclusion-tests">Et mes tests Behat üò∞</a></li>
            </ul></li>
    </ul>
    <p><a name="1"></a></p>
    <h2>1. Afficher une page d'accueil</h2>
    <p><a name="1.1"></a></p>
    <h3>1.1 Cr√©ation d'un projet vide</h3>
    <p>Pour se lancer, je vais partir d‚Äôun projet vide mais vous pouvez partir d‚Äôun projet existant tant qu‚Äôil est en 2.7+. En dessous, il sera difficile d‚Äôutiliser le <a href="https://github.com/contentful/ContentfulBundle">bundle</a> aidant √† la connexion avec le cms.</p>
    <pre><code class="shell hljs">symfony new afsy
</code></pre>
    <p>et on va enchainer directement sur l'installation du bundle officiel:</p>
    <pre><code class="shell hljs">composer require contentful/contentful-bundle
</code></pre>
    <p>avec la d√©claration du bundle dans le Kernel:</p>
    <pre><code class="php hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppKernel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Kernel</span>
</span>{
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">registerBundles</span><span class="hljs-params">()</span>
</span>{
    $bundles = [
        <span class="hljs-comment">//...</span>
        <span class="hljs-keyword">new</span> Contentful\ContentfulBundle\ContentfulBundle(),
    ];
}
}
</code></pre>
    <p>Assurez-vous qu'au moins un moteur de template est d√©fini dans la configuration <code>framework.templating</code> pour permettre au bundle de fonctionner:</p>
    <pre><code class="yaml hljs css"><span class="hljs-selector-id">#config</span><span class="hljs-selector-class">.yml</span>
<span class="hljs-selector-tag">framework</span>:
<span class="hljs-selector-tag">templating</span>: { <span class="hljs-attribute">engines</span>: [<span class="hljs-string">'twig'</span>] }
</code></pre>
    <p><a name="1.2"></a></p>
    <h3>1.2 Cr√©ation de l'espace Contenful</h3>
    <p>D√©sormais, destination <a href="https://contentful.com">https://contentful.com</a> !
        On va cr√©er un compte si ce n'est pas d√©j√† fait et ensuite on va cr√©er un espace.
        Dans le jargon de Contentful, un <em>espace</em> se r√©sumera tr√®s souvent √† un projet mais il est tout √† fait possible d'imaginer d'autres organisation. La notre se nommera afsy et partira sur un projet vide:</p>
    <p><img src="https://tppr.s3.amazonaws.com/uploads/86b69fecfb0e0f954245b1092291d861.png" alt="nouvel espace"></p>
    <p>Le champ <code>language</code> est l√† pour d√©finir la langue par d√©faut des contenus qui vont √™tre cr√©√©s, il sera possible d'en ajouter par la suite mais comme c'est pour l'AFSY, on va choisir Francais üá´üá∑ .</p>
    <p>La deuxi√®me √©tape est alors de d√©finir le mod√®le de notre contenu, on y est d'ailleurs invit√© d√®s le d√©but:</p>
    <p><img src="https://tppr.s3.amazonaws.com/uploads/8571107669d919420bb187de2539f8d2.png" alt="Cr√©er un type de contenu"></p>
    <p>On va commencer tranquille avec le type <code>Page</code> qui permettra de faire une premi√®re int√©gration avec notre projet Symfony de mani√®re facile et rapide:</p>
    <p><img src="https://tppr.s3.amazonaws.com/uploads/814cfe1c7cf8e117d2bd20035e0d3ac4.png" alt="Content type Page"></p>
    <p>Je vous conseille de jouer un peu avec le syst√®me, pour ma part, j'ai trouv√© l'interface tr√®s bien faite et adapt√©e √† un profil technique comme le notre mais je vous laisse vous faire votre propre avis :)</p>
    <p>Ensuite, si vous n'√™tes pas allergiques √† <code>npm</code>, je vous conseille d'installer le paquet <code>contentful-import</code> qui va vous permettre d'importer facilement sch√©mas, contenus et assets, c'est id√©al pour potentiellement capitaliser entre des projets ou dans le cadre de tests, cela fait d'excellentes donn√©es de test (fixtures):</p>
    <pre><code class="shell hljs">npm install -g contentful-import
</code></pre>
    <p>‚Ñπ <strong>pour vous g√©n√©rer les fichiers json, j'ai utilis√© son coll√®gue contentful-export</strong></p>
    <p>Une fois que c'est fait, vous pouvez alors t√©l√©charger le fichier <a href="https://assets.contentful.com/ukmha2pdldgt/6qKgNK1ZhCKC4SAkIGUAsg/3546199c31f0be723ec3feb2e97dac2c/contentful-export-3kfuw0hayp3u-1511973698912.json" target="_blank">page.json</a> pour l'importer dans votre space (ou dans un nouvel espace, vous faites bien comme c'est le plus pratique pour vous cher ami):</p>
    <pre><code class="shell hljs">contentful-import --space-id YOUR_SPACE_ID --management-token YOUR-MGTOKEN --content-file page.json
</code></pre>
    <p>‚Ñπ <strong>Pour r√©cup√©rer votre space-id ainsi que votre delivery_token (qu'il vous faudra dans quelques minutes), √ßa se passe dans le menu API &gt; Content delivery / preview tokens &gt; Website key</strong></p>
    <p>‚Ñπ <strong>Pour r√©cup√©rer/g√©n√©rer votre management-token, √ßa se passe dans le menu API &gt; Content management tokens</strong></p>
    <p>Allez voir dans la partie <code>Content</code>, vous devriez avoir la page d'accueil, cela suffira pour commencer √† jouer avec cette partie de notre cms.</p>
    <p><a name="1.3"></a></p>
    <h3>1.3. Retour √† Symfony</h3>
    <p><a name="1.3.configuration"></a></p>
    <h4>configuration</h4>
    <p>Pour faire le lien avec votre espace contenful, il faut d√©finir 2 choses relatives √† configuration de Contentful: le <code>spaceId</code> et le <code>token</code>.</p>
    <pre><code class="yaml hljs bash"><span class="hljs-comment">#parameters.yml.dist</span>
parameters.yml:
contentful_delivery_space: spaceID
contentful_delivery_token: token

<span class="hljs-comment">#config.yml</span>
contentful:
delivery:
space: <span class="hljs-string">'%contentful_delivery_space%'</span>
token: <span class="hljs-string">'%contentful_delivery_token%'</span>
</code></pre>
    <p><a name="1.3.controller-view"></a></p>
    <h4>Contr√¥leur + Vue</h4>
    <p>Pour afficher cette belle page dans notre site, on va avoir besoin d'un controller <code>PageController</code> avec une action <code>showAction</code> qui sera charg√©e d'aller chercher dans l'api de Contentful la page relative au slug pass√© en <code>request</code> (homepage par d√©faut) et d'afficher son contenu. Avant de faire la vue et l'action, on va installer un bundle nous permettant de convertir du markdown en html pour pouvoir ensuite l'interpr√©ter, le gros classique est le <strong>KnpMarkdownBundle</strong> donc:</p>
    <pre><code class="shell hljs">composer require knplabs/knp-markdown-bundle
</code></pre>
    <p>et puis l'immanquable ajout dans l'AppKernel (on tient bon, Flex sera bient√¥t partout ‚úä):</p>
    <pre><code class="php hljs"><span class="hljs-comment">//src/AppKernel.php</span>
$bundles = [
<span class="hljs-comment">//...</span>
<span class="hljs-keyword">new</span> Knp\Bundle\MarkdownBundle\KnpMarkdownBundle(),
];
</code></pre>
    <p>Allons-y pour le controller et l'action <code>showAction</code>:</p>
    <pre><code class="php hljs"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">//src/AppBundle/Controller/CMS/PageController.php</span>
<span class="hljs-keyword">namespace</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Controller</span>\<span class="hljs-title">CMS</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">Sensio</span>\<span class="hljs-title">Bundle</span>\<span class="hljs-title">FrameworkExtraBundle</span>\<span class="hljs-title">Configuration</span>\<span class="hljs-title">Route</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Bundle</span>\<span class="hljs-title">FrameworkBundle</span>\<span class="hljs-title">Controller</span>\<span class="hljs-title">Controller</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">HttpFoundation</span>\<span class="hljs-title">Request</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">HttpKernel</span>\<span class="hljs-title">Exception</span>\<span class="hljs-title">NotFoundHttpException</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>
</span>{
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@Route</span>("/", name="homepage")
 * <span class="hljs-doctag">@Route</span>("/{slug}", name="app_cms_page_show")
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showAction</span><span class="hljs-params">($slug = <span class="hljs-string">'homepage'</span>)</span>
</span>{
    $client = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">'contentful.delivery'</span>);
    $query = <span class="hljs-keyword">new</span> \Contentful\Delivery\Query;
    $query-&gt;setContentType(<span class="hljs-string">'page'</span>)
        -&gt;where(<span class="hljs-string">'fields.slug'</span>, $slug)
        -&gt;setLimit(<span class="hljs-number">1</span>);
    $entry = $client-&gt;getEntries($query)[<span class="hljs-number">0</span>];

    <span class="hljs-keyword">if</span> (!$entry) {
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotFoundHttpException;
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;render(<span class="hljs-string">'cms/page/show.html.twig'</span>, [
        <span class="hljs-string">'page'</span> =&gt; $entry,
    ]);
}
}
</code></pre>
    <p>et voici une vue qui va faire honneur √† notre contenu:</p>
    <pre><code class="twig hljs bash">{<span class="hljs-comment"># app/Resources/views/cms/page #}</span>
            {% extends <span class="hljs-string">"::base.html.twig"</span> %}

            {% block body %}
                &lt;h1&gt;{{ page.getName() }}&lt;/h1&gt;
                {{ page.getText()|markdown|raw }}
            {% endblock %}
</code></pre>
    <p>Si on va sur la page d'accueil... üéä  √ßa communique avec Contentful et les modifications se r√©percuteront bien sur dans le site lorsqu'on d√©cidera de les publier (avec quelques petits secondes de d√©lais, cache oblige) !</p>
    <p>C'est un peu minimaliste comme page d'accueil mais on ne va pas en rester l√†; je veux y afficher une liste d'√©v√©nements et j'ai envie d'avoir un design et un template sp√©cifique pour ma page d'accueil et ce n'est pas en markdown qu'on va le faire, rassurez-vous !</p>
    <p>Je vous laisse cr√©er une autre page, par exemple la page <code>a-propos</code> pour tester que la route <code>app_cms_page_show</code> fonctionne bien sur les autres pages (que la page homepage).</p>
    <p><a name="1.3.layout"></a></p>
    <h4>L'organisation du contenu dans les pages</h4>
    <p>Pour rendre la page d'accueil attractive, on m'a demand√© d'avoir 3 parties:</p>
    <ol>
        <li><p>une cover permettant de mettre en avant le logo, la base ligne de l'asso et le bouton d'inscription au google group</p></li>
        <li><p>les 3 objectifs de l'asso:</p></li>
    </ol>
    <p><img src="https://tppr.s3.amazonaws.com/uploads/48502e67b6e61a67cae590512dbffba8.png" alt="objectifs">
        3. la liste des √©v√©nements pass√©s ou √† venir</p>
    <p><img src="https://tppr.s3.amazonaws.com/uploads/d3294bba6721d4d536b179c30d31f1cf.png" alt="√©v√©nements"></p>
    <p>2 r√©flexions:
        - en l'√©tat, ma page d'accueil a la m√™me structure que ma page <code>a-propos</code>, je vais avoir besoin de flexibilit√©, il faut r√©ussir √† le faire sans trop complexifier le m√©canisme
        - il peut √™tre tentant de mettre les objectifs <strong>en dur</strong> dans le twig car <strong>c'est pas grand chose √† changer</strong> et <strong>√ßa ne prend pas longtemps si besoin</strong>... ma philosophie est que si c'est du contenu, c'est le gestionnaire de contenu qui en est le responsable et sa place est donc dans le cms (et cr√©er un nouveau mod√®le est fun, prend 3 minutes et fais gagner du temps le jour o√π on veut les changer).</p>
    <p><a name="1.3.layout.goals"></a></p>
    <h5>Les objectifs</h5>
    <p>Pour cr√©er le mod√®le Goal et ajouter le contenu (<em>3 objectifs + 3 images</em>), 2 possibilit√©s pour vous:</p>
    <ul>
        <li>la premi√®re une tr√®s rapide, elle utilise le <code>cli</code> et de <a href="https://assets.contentful.com/ukmha2pdldgt/6rSw9RAiCQcGmE8QiGOuCu/9353beed4a451d5c2ba54005cb393a9e/goals.json" target="_blank">ce fichier</a>:</li>
    </ul>
    <pre><code class="hljs coffeescript">contentful-<span class="hljs-keyword">import</span> --space-id SPACE_ID --management-token MGT_TOKEN --content-file goals.json
</code></pre>
    <ul>
        <li>la deuxi√®me est un peu plus longue (10 min) puisqu'il faut cr√©er soit-m√™me le content-model et peupler le mod√®le:
            <img src="https://tppr.s3.amazonaws.com/uploads/da0518741c8b03f5202e2b10771d91c6.png" alt="model goals"></li>
    </ul>
    <p>Une fois que c'est fait, on va faire en sorte de les afficher dans la page d'accueil et pour commencer je vous propose cette petite astuce qui vous permettra de customiser les vues de certaines pages sp√©ciales comme la page d'accueil tout en gardant une vue par d√©faut pour les pages dites <em>classiques</em>:</p>
    <pre><code class="php hljs"><br><span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Templating</span>\<span class="hljs-title">EngineInterface</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>
</span>{
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@Route</span>("/", name="homepage")
 * <span class="hljs-doctag">@Route</span>("/{slug}", name="page_show")
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showAction</span><span class="hljs-params">(EngineInterface $twigEngine, $slug = <span class="hljs-string">'homepage'</span>)</span>
</span>{
    <span class="hljs-comment">//...</span>
            <span class="hljs-comment">//seek for custom template</span>
    $template = sprintf(<span class="hljs-string">'cms/page/custom/%s.html.twig'</span>, $slug);
    <span class="hljs-keyword">if</span> (!$twigEngine-&gt;exists($template) ) {
        $template = <span class="hljs-string">'cms/page/show.html.twig'</span>;
    }
    <span class="hljs-comment">// replace this example code with whatever you need</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;render($template, [
        <span class="hljs-string">'page'</span> =&gt; $entry,
    ]);
}
}
</code></pre>
    <p>‚Ñπ ce petit bout de code tr√®s simple va permettre d'aller d'abord voir s'il n'existe pas une template sp√©cial pour la page qu'on essaye de charger (<strong>app/Resources/views/cms/page/custom/homepage.html.twig</strong>) et va revenir sinon sur la vue par d√©faut (<strong>app/Resources/views/cms/page/show.html.twig</strong>)</p>
    <p>On va donc pouvoir commencer √† personnaliser la page d'accueil:</p>
    <pre><code class="twig hljs xml">{% extends "::base.html.twig" %}

            {% block body %}
                <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cover-section"</span>&gt;</span>
    {{ page.getText()|markdown|raw }} {# here will stand the name, baseline and call to action #}
<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"goals-section"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>
        Nos objectifs
    <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>
                <span class="hljs-comment">&lt;!-- Add goals section here --&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"events-section"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>
        Les √©v√©nements
    <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>
                <span class="hljs-comment">&lt;!-- Add events section here --&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>
            {% endblock %}
</code></pre>
    <p>On voit ici qu'on a maintenant 3 sections (dont 2 vides):
        - la cover qui va simplement afficher le contenu pr√©sent dans le champ <code>text</code> de la page d'accueil (par exemple le h1, h2 et un bouton)
        - les objectifs
        - les √©v√©nements</p>
    <p>Pour les objectifs et les √©v√©nements, on peut utiliser la m√©thode render (ou render_esi):</p>
    <pre><code class="twig hljs bash">{{ render(path(<span class="hljs-string">'app_cms_event_rendergoals'</span>)) }}
</code></pre>
    <p>‚Ñπ <a href="https://symfony.com/doc/master/reference/twig_reference.html#render">Plus d'info sur la fonction render / render_esi</a></p>
    <p>et voici les actions de contr√¥leurs associ√©s:</p>
    <pre><code class="php hljs"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">namespace</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Controller</span>\<span class="hljs-title">CMS</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Bundle</span>\<span class="hljs-title">FrameworkBundle</span>\<span class="hljs-title">Controller</span>\<span class="hljs-title">Controller</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Sensio</span>\<span class="hljs-title">Bundle</span>\<span class="hljs-title">FrameworkExtraBundle</span>\<span class="hljs-title">Configuration</span>\<span class="hljs-title">Route</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">HttpFoundation</span>\<span class="hljs-title">Response</span>;

<span class="hljs-comment">/**
* <span class="hljs-doctag">@Route</span>("/goals")
*/</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoalsController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>
</span>{
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@Route</span>("/")
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderListAction</span><span class="hljs-params">()</span>
</span>{
    $client = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">'contentful.delivery'</span>);
    $query = <span class="hljs-keyword">new</span> \Contentful\Delivery\Query;
    $query-&gt;setContentType(<span class="hljs-string">'goal'</span>);

    $response = <span class="hljs-string">''</span>;
    <span class="hljs-keyword">foreach</span> ($client-&gt;getEntries($query) <span class="hljs-keyword">as</span> $goal) {
        $response.= <span class="hljs-keyword">$this</span>-&gt;renderView(<span class="hljs-string">'cms/goals/_item.html.twig'</span>, [
            <span class="hljs-string">'goal'</span> =&gt; $goal
        ]);
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Response($response);
}
}
</code></pre>
    <p>et la vue d'un objectif:</p>
    <pre><code class="twig hljs xml">{# app/Resources/views/cms/goals/_item.html.twig #}
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>{{ goal.getName() }}<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>
            {% if goal.getPicture() %}
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"{{ goal.getPicture().file.url ~ "</span>?<span class="hljs-attr">fm</span>=<span class="hljs-string">jpg&amp;w</span>=<span class="hljs-string">350&amp;h</span>=<span class="hljs-string">350</span>" }}"/&gt;</span>
                {% endif %}
                {{ goal.getDescription()|markdown|raw }}
                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
    <p><a name="1.3.layout.events"></a></p>
    <h5>Les √©v√©nements</h5>
    <p>Pour les √©v√©nements, on peut s'y prendre exactement de la m√™me mani√®re avec la cr√©ation d'un mod√®le de donn√©es c√¥t√© Contentful et avec l'utilisation de la fonction render...</p>
    <p>Voici le fichier pour d√©finir le mod√®le Event comme je l'ai fait, il y a 2 √©v√©n√©ments inclus: <a href="https://assets.contentful.com/ukmha2pdldgt/1dKVi4oVhsY8ysUCCWoSAU/e0c41adf45676181540acb6695dcb2ad/events.json" target="_blank">events.json</a>.</p>
    <p>Voici le controller EventController:</p>
    <pre><code class="php hljs"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">namespace</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Controller</span>\<span class="hljs-title">CMS</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Bundle</span>\<span class="hljs-title">FrameworkBundle</span>\<span class="hljs-title">Controller</span>\<span class="hljs-title">Controller</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Sensio</span>\<span class="hljs-title">Bundle</span>\<span class="hljs-title">FrameworkExtraBundle</span>\<span class="hljs-title">Configuration</span>\<span class="hljs-title">Route</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">HttpFoundation</span>\<span class="hljs-title">Response</span>;

<span class="hljs-comment">/**
* <span class="hljs-doctag">@Route</span>("/event")
*/</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>
</span>{
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@Route</span>("/")
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderListAction</span><span class="hljs-params">($max = <span class="hljs-number">10</span>)</span>
</span>{
    $client = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">'contentful.delivery'</span>);
    $query = <span class="hljs-keyword">new</span> \Contentful\Delivery\Query;
    $query-&gt;setContentType(<span class="hljs-string">'event'</span>)
        -&gt;orderBy(<span class="hljs-string">'fields.date'</span>, <span class="hljs-keyword">true</span>)
        -&gt;setLimit($max);

    $response = <span class="hljs-string">''</span>;
    <span class="hljs-keyword">foreach</span> ($client-&gt;getEntries($query) <span class="hljs-keyword">as</span> $event) {
        $response.= <span class="hljs-keyword">$this</span>-&gt;renderView(<span class="hljs-string">'cms/event/_item.html.twig'</span>, [
            <span class="hljs-string">'event'</span> =&gt; $event
        ]);
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Response($response);
}
}
</code></pre>
    <p>et la vue associ√©e:</p>
    <pre><code class="twig hljs bash">&lt;section&gt;
&lt;div id=<span class="hljs-string">"{{ event.getId() }}-map"</span> style=<span class="hljs-string">"width: 300px; height: 300px;"</span>&gt;&lt;/div&gt;
&lt;div&gt;
            {% <span class="hljs-keyword">if</span> event.getDate() &lt; date(<span class="hljs-string">'now'</span>) %}
        &lt;span style=<span class="hljs-string">"right: 20px; top: 20px; position: absolute;"</span>&gt;√âvenement pass√©&lt;/span&gt;
            {% endif %}
            &lt;div&gt;
        &lt;h4&gt;{{ event.getTitle() }}&lt;/h4&gt;
        &lt;small&gt;{{ event.getDate()|date(<span class="hljs-string">'d/m/Y'</span>) }}&lt;/small&gt;
            {% <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> event.getTags() %}
            &lt;strong&gt;{{ tag }}&lt;/strong&gt;
            {% endfor %}
            {{ event.getDescription() }}
            &lt;a href=<span class="hljs-string">"{{ event.getLink() }}"</span> class=<span class="hljs-string">"mdl-button"</span>&gt;Plus d<span class="hljs-string">'info&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;br/&gt;
&lt;script&gt;
&lt;!-- equivalent to $(document).ready() but without jquery --&gt;
function r(f){/in/.test(document.readyState)?setTimeout('</span>r(<span class="hljs-string">'+f+'</span>)<span class="hljs-string">',9):f()}
r(function(){
    initMap{{ event.getId() }}();
});
function initMap{{ event.getId() }}() {
    var eventLocation{{ event.getId() }} = {lat: {{ event.getLocation().latitude }}, lng: {{ event.getLocation().longitude }} };
    var map{{ event.getId() }} = new google.maps.Map(document.getElementById('</span>{{ event.getId() }}-map<span class="hljs-string">'), {
        zoom: 13,
        center: eventLocation{{ event.getId() }},
        disableDefaultUI: true
    });
    var marker{{ event.getId() }} = new google.maps.Marker({
        position: eventLocation{{ event.getId() }},
        map: map{{ event.getId() }}
                });
}
&lt;/script&gt;
</span></code></pre>
    <p>Vous noterez qu'il y a des cartes gmap embarqu√©es donc il faut rajouter la lib dans le layout de base:</p>
    <pre><code class="hljs xml">{# app/Resources/views/base.html.twig #}

            {% block javascripts %}
                <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"<a class="vglnk" href="https://maps.googleapis.com/maps/api/js?key=" rel="nofollow"><span>https</span><span>://</span><span>maps</span><span>.</span><span>googleapis</span><span>.</span><span>com</span><span>/</span><span>maps</span><span>/</span><span>api</span><span>/</span><span>js</span><span>?</span><span>key</span><span>=</span></a>{{ googleMapAPIKEY }}{% block gmapExtraAttributes %}{% endblock %}"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
            {% endblock %}
</code></pre>
    <p>et bien-sur ajoutez en parameter la cl√© (que vous aurez g√©n√©r√© <a href="https://developers.google.com/maps/documentation/javascript">ici</a>) et passez-l√† en global:</p>
    <pre><code class="yaml hljs makefile"><span class="hljs-comment">#parameters.yml.dist</span>
<span class="hljs-section">parameters:</span>
googleMapsApiKey: key

<span class="hljs-comment">#config.yml</span>
<span class="hljs-section">twig:</span>
<span class="hljs-comment">#...</span>
globals:
    googleMapAPIKEY: '%googleMapsApiKey%'
</code></pre>
    <p><a name="2"></a></p>
    <h2>2. Le blog</h2>
    <p>Cr√©er un blog simple dans un site Symfony n'est pas tr√®s compliqu√©, mais Contentful va nous nous permettre d‚Äô√©viter de r√©inventer la roue tout en solidifiant et professionnalisant notre blog.</p>
    <p>Lorsqu'on cr√©√© un nouvel espace dans Contentful, plut√¥t que de partir avec le squelette vide, on peut choisir le template Blog (ainsi que catalogue de produit et galerie photo) qui nous am√®nera un mod√®le √©prouv√©, des donn√©es de test ainsi que des exemples de consommations dans beaucoup de langages. D'ailleurs, si vous voulez voir d'autres impl√©mentation, vous pouvez aller voir les projets <em>bac √† sable</em>: <a href="https://github.com/contentful/product-catalogue-app-symfony">un catalogue de produit avec Symfony</a> ou <a href="https://github.com/contentful/blog-app-laravel">un blog avec Laravel</a>.</p>
    <p><i>üíæ</i> Voici le fichier qu'il vous faudra importer comme pr√©c√©demment avec contentful-import pour r√©cup√©rer dans votre espace un blog pr√™t √† utiliser <a href="https://assets.contentful.com/ukmha2pdldgt/3QAfbGHbPaOoGW6OY8SUog/8686303ff0b7e88b87a8253aba045543/blog.json" target="_blank">blog.json</a></p>
    <p><a name="2.1"></a></p>
    <h3>2.1 Un blog de base</h3>
    <p>Le blog apport√© par Contentful est minimaliste et c'est tant mieux, pas de fioriture et libre √† nous d'ajouter ce que l'on souhaite. De base, on a:</p>
    <ul>
        <li>des articles</li>
        <li>des cat√©gories</li>
        <li>des auteurs</li>
    </ul>
    <p>On va donc faire une vue Blog qui va lister tous les articles puis une vue pour afficher chaque article et ouvrir un syst√®me de commentaires sans effort. On ajoutera aussi une vue pour lister uniquement les articles d'une cat√©gorie.</p>
    <p><a name="2.1.index"></a></p>
    <h4>Index du blog</h4>
    <p>Tout d'abord, on va commencer par cr√©er le <code>PostController</code> comme ceci:</p>
    <pre><code class="php hljs"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">namespace</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Controller</span>\<span class="hljs-title">CMS</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Bundle</span>\<span class="hljs-title">FrameworkBundle</span>\<span class="hljs-title">Controller</span>\<span class="hljs-title">Controller</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span>
</span>{
<span class="hljs-keyword">const</span> CONTENT_TYPE_POST = <span class="hljs-string">'2wKn6yEnZewu2SCCkus4as'</span>;
<span class="hljs-keyword">const</span> CONTENT_TYPE_CATEGORY = <span class="hljs-string">'5KMiN6YPvi42icqAUQMCQe'</span>;
<span class="hljs-keyword">const</span> CONTENT_TYPE_AUTHOR = <span class="hljs-string">'1kUEViTN4EmGiEaaeC6ouY'</span>;
}
</code></pre>
    <p><i>‚Ñπ</i> Notez la d√©finition des constants <code>CONTENT_TYPE_*</code>. Le syst√®me g√©n√®re par d√©faut un identifiant unique lorsqu'on cr√©√© un Mod√®le (<code>content-type</code>), afin d‚Äô√©viter d'avoir un conflit lors d'un import avec un mod√®le ayant le m√™me identifiant. Si vous √™tes s√ªrs de ne pas g√©n√©rer de conflit, il est possible de d√©finir un identifiant non obscurci comme dans l'exemple pr√©c√©dent sur le mod√®le <code>Page</code> qui a <code>page</code> comme identifiant.</p>
    <p>On va rajouter ensuite la m√©thode permettant de lister les articles par ordre ant√©chronologique:</p>
    <pre><code class="php hljs">    <span class="hljs-comment">/**
 * <span class="hljs-doctag">@Route</span>("/blog")
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">indexAction</span><span class="hljs-params">()</span>
</span>{
    $client = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">'contentful.delivery'</span>);
    $query = <span class="hljs-keyword">new</span> \Contentful\Delivery\Query;
    $query-&gt;setContentType(<span class="hljs-keyword">self</span>::CONTENT_TYPE_POST)-&gt;orderBy(<span class="hljs-string">'fields.date'</span>, <span class="hljs-keyword">true</span>);

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;render(<span class="hljs-string">'cms/post/index.html.twig'</span>, [
        <span class="hljs-string">'entries'</span> =&gt; $client-&gt;getEntries($query)
    ]);
}
</code></pre>
    <p>et la vue associ√©e:</p>
    <pre><code class="twig hljs xml">{% extends "base.html.twig" %}

            {% block title %}Blog - {{ parent() }}{% endblock %}
            {% block body %}
            <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"section-blog"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{ title|default('Blog') }}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>
            {% for post in entries %}
            <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{ post.title }}
            <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>par
            {% for post.getAuthor() %}
                {{ post.author.name }}
                {% if loop.index == post.getAuthor()|length - 1 %}
                    et
                {% else if not loop.last %}
                    ,
                {% endif %}
            {% endfor %}
            <span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span> le {{ post.getDate()|date('d/m/Y') }}
            <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"{{ post.getFeaturedImage().file.url ~ "</span>?<span class="hljs-attr">fm</span>=<span class="hljs-string">jpg&amp;w</span>=<span class="hljs-string">215&amp;h</span>=<span class="hljs-string">215</span>" }})"/&gt;</span>
            {% for category in post.getCategory() %}
                <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>
                {{ category.getTitle() }}
            <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>
            {% endfor %}
            {{ post.getBody()|markdown|striptags|truncate(150)|raw }}
            <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>
            {% endfor %}
            <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>
            {% endblock %}
</code></pre>
    <p>Si on se rend sur /blog, on va d√©sormais avoir l'affichage certes rudimentaire mais non moins op√©rationnel des articles de notre blog. Pour l'instant, il manque l'action de visualisation d'un article, on veut lire le contenu complet, pas juste l'extrait.</p>
    <p><a name="2.1.show"></a></p>
    <h4>Vue d'un article</h4>
    <p>Impl√©mentons tout √ßa:</p>
    <pre><code class="php hljs">    <span class="hljs-comment">//src/AppBundle/Controller/CMS/PostController.php</span>

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@Route</span>("/blog/{slug}")
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showAction</span><span class="hljs-params">($slug)</span>
</span>{
    $client = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">'contentful.delivery'</span>);
    $query = <span class="hljs-keyword">new</span> \Contentful\Delivery\Query;
    $query-&gt;setContentType(<span class="hljs-keyword">self</span>::CONTENT_TYPE_POST)
        -&gt;where(<span class="hljs-string">'fields.slug'</span>, $slug, <span class="hljs-string">'match'</span>)
        -&gt;setLimit(<span class="hljs-number">1</span>);

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;render(<span class="hljs-string">'cms/post/show.html.twig'</span>, [
        <span class="hljs-string">'post'</span> =&gt; $client-&gt;getEntries($query)[<span class="hljs-number">0</span>]
    ]);
}
</code></pre>
    <p>et la vue associ√©e:</p>
    <pre><code class="twig hljs xml">{# app/Resources/views/cms/post/show.html.twig #}
            {% extends "::base.html.twig" %}

            {% block title %}{{ post.getTitle() }} - {{ parent() }}{% endblock %}
            {% block body %}
                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{ post.getTitle() }}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
    {% for category in post.getCategory() %}
                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>
            {{ category.getTitle() }}
        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
            {% endfor %}
<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
                {{ post.getBody()|markdown|raw }}
            {% endblock %}
</code></pre>
    <p>Ne pas oublier de rajouter un petit lien dans l'index du blog pour pouvoir naviguer sur notre article:</p>
    <pre><code class="twig hljs bash">{<span class="hljs-comment"># app/Resources/views/cms/post/index.html.twig #}</span>

...
            {% block body %}
                ...

                {% <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> entries %}
    ...
    &lt;a href=<span class="hljs-string">"{{ path('app_cms_post_show', {slug: post.getSlug()}) }}"</span>&gt;
                Lire
                &lt;/a&gt;
                {% endfor %}
                ...
            {% endblock %}
            ...
</code></pre>
    <p><a name="2.1.listByCateg-avent"></a></p>
    <h4>Liste des articles par cat√©gorie + calendrier de l'avent</h4>
    <p>Attaquons-nous aux cat√©gories d√©sormais. La liste des articles d'une cat√©gorie n'est finalement qu'une liste d'articles filtr√©e sur la cat√©gorie, on va donc avoir besoin d'ajouter un action et une route particuli√®re pour faire cette action mais on va pouvoir utiliser la m√™me vue que l'index g√©n√©ral:</p>
    <pre><code class="php hljs">    <span class="hljs-comment">//src/AppBundle/Controller/CMS/PostController</span>
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@Route</span>("/blog/category/{slug}")
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listByCategoryAction</span><span class="hljs-params">($slug, EngineInterface $twigEngine)</span>
</span>{
    $client = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-string">'contentful.delivery'</span>);
    <span class="hljs-comment">//find first the category</span>
    $query = <span class="hljs-keyword">new</span> \Contentful\Delivery\Query;
    $query-&gt;setContentType(<span class="hljs-keyword">self</span>::CONTENT_TYPE_CATEGORY)
        -&gt;where(<span class="hljs-string">'fields.slug'</span>, $slug)
        -&gt;setLimit(<span class="hljs-number">1</span>);
    $category = $client-&gt;getEntries($query)[<span class="hljs-number">0</span>];

    <span class="hljs-comment">//find posts by category</span>
    $query = <span class="hljs-keyword">new</span> \Contentful\Delivery\Query;
    $query-&gt;setContentType(<span class="hljs-keyword">self</span>::CONTENT_TYPE_POST)
        -&gt;where(<span class="hljs-string">'fields.category.sys.id'</span>, $category-&gt;getId())
        -&gt;orderBy(<span class="hljs-string">'fields.date'</span>);

    <span class="hljs-comment">//seek for category custom template</span>
    $template = sprintf(<span class="hljs-string">'cms/category/custom/%s.html.twig'</span>, $slug);
    <span class="hljs-keyword">if</span> (!$twigEngine-&gt;exists($template) ) {
        $template = <span class="hljs-string">'cms/post/index.html.twig'</span>;
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;render($template, [
        <span class="hljs-string">'title'</span> =&gt; $category-&gt;getTitle(),
        <span class="hljs-string">'entries'</span> =&gt; $client-&gt;getEntries($query)
    ]);
}
</code></pre>
    <p>En dehors du code du client Contentful qui nous est maintenant presque familier, on voit qu'on fait 2 requ√™tes. Une premi√®re pour aller chercher la cat√©gorie en fonction du slug, une deuxi√®me pour aller chercher les articles associ√©s √† cette cat√©gorie.</p>
    <p>Comme vous l'avez peut-√™tre remarqu√© j'ai utilis√© la m√™me m√©canique que sur la homepage pour avoir le droit de surcharger le template de la page d'une collection. √áa nous sera utile par exemple pour mettre en forme le calendrier de l'avent qui nous est demand√©, qui est une <em>cat√©gorie</em> du c√¥t√© du cms.</p>
    <p>On est libre de faire des choses √©volu√©es tr√®s rapidement. Par exemple, Pour ce besoin tr√®s pr√©cis de calendrier de l'avent, je me suis amus√© √† faire une petite veille et j'ai trouv√© chez les amis de Codrops une exp√©rimentation <a href="https://tympanus.net/codrops/2016/11/09/cubes-advent-calendar/">Cubes Advent Calendar</a> qui correspondait tout √† fait √† mes attentes:</p>
    <p><img src="https://images.contentful.com/ukmha2pdldgt/48hO4rtU1GoAIoEK6yemQK/91e86d6504417ddd8e7f11bf7ecaf6c4/avent-calendar.gif" alt="calendrier de l'avent par codrops"></p>
    <p>C'est un peu long et pas si fou que √ßa donc je pr√©f√®res d√©tailler d'autres points mais si ca vous int√©resse, retrouvez l'impl√©mentation du calendrier de l'avent <a href="https://github.com/lenybernard/afsy.fr/commit/77ef83c1b16da80cd18dc4968c2f5f22b7674e26">ici</a>.</p>
    <p><a name="3"></a></p>
    <h3>3 Soumettre des √©v√©nements depuis le site</h3>
    <p>Jusqu'√† pr√©sent, on est rest√© dans une d√©marche de consommation du contenu situ√© dans le cms mais pour ce nouveau besoin, c'est un internaute qui doit cr√©er, en passant par le site, un nouvel √©v√©nement. Cet √©v√©nement devra avoir un statut particulier "<strong>En attente</strong>" et ne s'affichera sur le site que lorsqu'il aura √©t√© valid√©.</p>
    <p><img src="https://images.contentful.com/ukmha2pdldgt/3XrBoiJtpegy2AUuaKM2iK/3ed785c6484d2591aaaa536f385905b2/171d32c5c3834ca871096277c5601dd0.png" alt="image preview"></p>
    <p>Pour ce faire, on va passer par la <strong>Content Management API</strong> (contrairement √† pr√©c√©demment o√π nous utilisions la <strong>Content Delivery API</strong>). D'ailleurs, vous l'avez d√©j√† utilis√© sans forc√©ment vous en rendre compte car c'est l'API qu'utilise le script <code>contentful-import</code> pour ajouter du contenu dans l'espace.</p>
    <p><strong>C'est l√† que √ßa se g√¢te (un tout petit peu)</strong></p>
    <p>Et oui, h√©las au jour o√π j'√©cris cet article, il semble qu'on ait quelques semaines d'avance car le bundle attend la version stable de la lib <code>contentful/contentful-management</code> pour y impl√©menter les fonctions visant √† faciliter la communication avec l'API de management.</p>
    <iframe src="https://giphy.com/embed/TaZxeBN6q6XDO" width="480" height="227" frameborder="0" class="giphy-embed" allowfullscreen=""></iframe>
    <p>En fait, c'est pas si grave car la solution existe ! Donc avant de faire une <a href="https://github.com/contentful/ContentfulBundle/issues/20">PR</a> ou au lieu d'attendre une mise √† jour du bundle, on peut d√©j√† bricoler quelque chose de propre pour avoir acc√®s √† un petit service de <code>Management</code> qui nous permettra de cr√©er nos √©v√©nements en un claquement de doigts ou presque.</p>
    <p><a name="3.1"></a></p>
    <h4>3.1 Architecture:</h4>
    <p><img src="https://images.contentful.com/ukmha2pdldgt/1SjsxAD4NOgMAUQmOua2qg/f2e5db92fc30a120255116e6f2dc86e3/Event_Handler.jpg" alt="image archi"></p>
    <p>Tout commence avec composer, on va installer contentful-management (il n'y a pas de version stable encore):</p>
    <p><a name="3.1.sdk-management"></a></p>
    <h5>Installation du sdk contentful-management</h5>
    <pre><code class="shell hljs">composer require contentful/contentful-management:@dev
</code></pre>
    <p>Ensuite, en suivant la <a href="https://www.contentful.com/developers/docs/references/content-management-api/#/reference/entries/entries-collection/create-an-entry/console/php">documentation</a>, on comprend qu'il va falloir instancier le client <code>Contentful\Management\Client</code> en lui passant le <code>content_management_api_key</code> et le <code>space_id</code>:</p>
    <pre><code class="php hljs"><br><span class="hljs-keyword">use</span> <span class="hljs-title">Contentful</span>\<span class="hljs-title">Management</span>\<span class="hljs-title">Client</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Contentful</span>\<span class="hljs-title">Management</span>\<span class="hljs-title">Resource</span>\<span class="hljs-title">Entry</span>;

$client = <span class="hljs-keyword">new</span> Client(<span class="hljs-string">'&lt;content_management_api_key&gt;'</span>, <span class="hljs-string">'&lt;space_id&gt;'</span>);

$entry = <span class="hljs-keyword">new</span> Entry(<span class="hljs-string">'&lt;content_type_id&gt;'</span>);
$entry-&gt;setField(<span class="hljs-string">'title'</span>, <span class="hljs-string">'en-US'</span>, <span class="hljs-string">'Entry title'</span>);

$client-&gt;entry-&gt;create($entry);
</code></pre>
    <p><a name="3.1.clientServiceDeclaration"></a></p>
    <h5>D√©claration du service</h5>
    <p>On va cr√©er un service pour s'affranchir de cette instanciation:</p>
    <pre><code class="yaml hljs bash"><span class="hljs-comment">#parameters.yml</span>
parameters:
contentful_management_token: token

<span class="hljs-comment">#app/config/services.yml</span>
services:
Contentful\Management\Client:
    arguments:
        <span class="hljs-variable">$token</span>: <span class="hljs-string">'%contentful_management_token%'</span>
        <span class="hljs-variable">$currentSpaceId</span>: <span class="hljs-string">'%contentful_delivery_space%'</span>
</code></pre>
    <p>Le client va nous permettre de cr√©er notre nouvel √©venement.</p>
    <p>Voici maintenant les quelques √©tapes pour d√©velopper cette fonctionnalit√©:
        - un model <strong>AppBundle\Domain\Model\Event</strong>
        - un formulaire <strong>EventType</strong> (+ 1 formulaire <strong>LocationType</strong> car c'est un peu sp√©cifique)
        - un transformer <strong>AppBundle\Domain\Transformer\EventToEntryTransformer</strong> pour changer notre <strong>Event</strong> en <strong>Contentful\Management\Resource\Entry</strong>
        - un handler <strong>AppBundle\Domain\Handler\AddEventHandler</strong> pour centraliser la logique propre √† la soumission d'un √©v√©nement</p>
    <p><a name="3.1.modelCreation"></a></p>
    <h4>Cr√©ation du model</h4>
    <p>On va cr√©er le model <strong>Event</strong> qui sera un miroir du <strong>content-type</strong> d√©fini dans <strong>Contentful</strong>:</p>
    <pre><code class="php hljs"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">namespace</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Domain</span>\<span class="hljs-title">Model</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Validator</span>\<span class="hljs-title">Constraints</span> <span class="hljs-title">as</span> <span class="hljs-title">Assert</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span>
</span>{
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@var</span> string
 */</span>
<span class="hljs-keyword">private</span> $title;
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@var</span> \DateTime
 */</span>
<span class="hljs-keyword">private</span> $date;
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@var</span> float
 */</span>
<span class="hljs-keyword">private</span> $latitude;
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@var</span> float
 */</span>
<span class="hljs-keyword">private</span> $longitude;
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@var</span> string
 */</span>
<span class="hljs-keyword">private</span> $description;
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@var</span> array
 */</span>
<span class="hljs-keyword">private</span> $tags = [];
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@var</span> string
 * <span class="hljs-doctag">@Assert</span>\Url()
 */</span>
<span class="hljs-keyword">private</span> $link;

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@return</span> string
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTitle</span><span class="hljs-params">()</span>: ?<span class="hljs-title">string</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;title;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param</span> string $title
 * <span class="hljs-doctag">@return</span> Event
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTitle</span><span class="hljs-params">(string $title)</span>: <span class="hljs-title">Event</span>
</span>{
    <span class="hljs-keyword">$this</span>-&gt;title = $title;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@return</span> \DateTime
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDate</span><span class="hljs-params">()</span>: ?\<span class="hljs-title">DateTime</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;date;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param</span> \DateTime $date
 * <span class="hljs-doctag">@return</span> Event
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setDate</span><span class="hljs-params">(\DateTime $date)</span>: <span class="hljs-title">Event</span>
</span>{
    <span class="hljs-keyword">$this</span>-&gt;date = $date;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@return</span> string
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDescription</span><span class="hljs-params">()</span>: ?<span class="hljs-title">string</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;description;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param</span> string $description
 * <span class="hljs-doctag">@return</span> Event
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setDescription</span><span class="hljs-params">(string $description)</span>: <span class="hljs-title">Event</span>
</span>{
    <span class="hljs-keyword">$this</span>-&gt;description = $description;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@return</span> array
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTags</span><span class="hljs-params">()</span>: ?<span class="hljs-title">array</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;tags;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param</span> array $tags
 * <span class="hljs-doctag">@return</span> Event
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTags</span><span class="hljs-params">(array $tags)</span>: <span class="hljs-title">Event</span>
</span>{
    <span class="hljs-keyword">$this</span>-&gt;tags = $tags;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@return</span> string
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLink</span><span class="hljs-params">()</span>: ?<span class="hljs-title">string</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;link;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param</span> string $link
 * <span class="hljs-doctag">@return</span> Event
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setLink</span><span class="hljs-params">(string $link)</span>: <span class="hljs-title">Event</span>
</span>{
    <span class="hljs-keyword">$this</span>-&gt;link = $link;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param</span> string $latitude
 * <span class="hljs-doctag">@return</span> Event
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setLatitude</span><span class="hljs-params">(string $latitude)</span>: <span class="hljs-title">Event</span>
</span>{
    <span class="hljs-keyword">$this</span>-&gt;latitude = $latitude;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@return</span> float
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLatitude</span><span class="hljs-params">()</span>: ?<span class="hljs-title">float</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;latitude;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param</span> float $longitude
 * <span class="hljs-doctag">@return</span> Event
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setLongitude</span><span class="hljs-params">(float $longitude)</span>: <span class="hljs-title">Event</span>
</span>{
    <span class="hljs-keyword">$this</span>-&gt;longitude = $longitude;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@return</span> float
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLongitude</span><span class="hljs-params">()</span>: ?<span class="hljs-title">float</span>
</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;longitude;
}
}
</code></pre>
    <p><a name="3.1.form"></a></p>
    <h4>Cr√©ation du formulaire</h4>
    <p>Puis on va faire la formulaire <code>EventType</code>:</p>
    <pre><code class="php hljs"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">namespace</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Form</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Domain</span>\<span class="hljs-title">Model</span>\<span class="hljs-title">Event</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Contentful</span>\<span class="hljs-title">Location</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">AbstractType</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">CallbackTransformer</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">Extension</span>\<span class="hljs-title">Core</span>\<span class="hljs-title">Type</span>\<span class="hljs-title">DateTimeType</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">Extension</span>\<span class="hljs-title">Core</span>\<span class="hljs-title">Type</span>\<span class="hljs-title">TextareaType</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">Extension</span>\<span class="hljs-title">Core</span>\<span class="hljs-title">Type</span>\<span class="hljs-title">TextType</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">FormBuilderInterface</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">OptionsResolver</span>\<span class="hljs-title">OptionsResolver</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractType</span>
</span>{
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildForm</span><span class="hljs-params">(FormBuilderInterface $builder, array $options)</span>
</span>{

    $builder
        -&gt;add(<span class="hljs-string">'title'</span>)
        -&gt;add(<span class="hljs-string">'date'</span>, DateTimeType::class, [
            <span class="hljs-string">'html5'</span> =&gt; <span class="hljs-keyword">true</span>,
            <span class="hljs-string">'years'</span> =&gt; range(date(<span class="hljs-string">'Y'</span>), date(<span class="hljs-string">'Y'</span>) + <span class="hljs-number">5</span>)
        ])
        -&gt;add(<span class="hljs-string">'location'</span>, LocationType::class, [
            <span class="hljs-string">'inherit_data'</span> =&gt; <span class="hljs-keyword">true</span>,
        ])
        -&gt;add(<span class="hljs-string">'description'</span>, TextareaType::class)
        -&gt;add(<span class="hljs-string">'tags'</span>, TextType::class, [
            <span class="hljs-string">'attr'</span> =&gt; [
                <span class="hljs-string">'placeholder'</span> =&gt; <span class="hljs-string">'SFPot, Nantes, Pizza'</span>
            ]
        ])
        -&gt;add(<span class="hljs-string">'link'</span>)
    ;

    $builder-&gt;get(<span class="hljs-string">'tags'</span>)
        -&gt;addModelTransformer(<span class="hljs-keyword">new</span> CallbackTransformer(
            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($tagsAsArray)</span> </span>{
                <span class="hljs-keyword">return</span> implode(<span class="hljs-string">', '</span>, $tagsAsArray);
            },
            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($tagsAsString)</span> </span>{
                <span class="hljs-keyword">return</span> explode(<span class="hljs-string">', '</span>, $tagsAsString);
            }
        ));
}

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configureOptions</span><span class="hljs-params">(OptionsResolver $resolver)</span>
</span>{
    $resolver-&gt;setDefault(<span class="hljs-string">'data_class'</span>, Event::class);
}
}
</code></pre>
    <p>ainsi que le <code>LocationType</code>:</p>
    <pre><code class="php hljs"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">namespace</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Form</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">Contentful</span>\<span class="hljs-title">Location</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">AbstractType</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">Extension</span>\<span class="hljs-title">Core</span>\<span class="hljs-title">Type</span>\<span class="hljs-title">HiddenType</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">Extension</span>\<span class="hljs-title">Core</span>\<span class="hljs-title">Type</span>\<span class="hljs-title">TextType</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">FormBuilderInterface</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">OptionsResolver</span>\<span class="hljs-title">OptionsResolver</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocationType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractType</span>
</span>{
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildForm</span><span class="hljs-params">(FormBuilderInterface $builder, array $options)</span>
</span>{
    $builder
        -&gt;add(<span class="hljs-string">'address'</span>, TextType::class, [
            <span class="hljs-string">'mapped'</span> =&gt; <span class="hljs-keyword">false</span>,
        ])
        -&gt;add(<span class="hljs-string">'latitude'</span>, HiddenType::class)
        -&gt;add(<span class="hljs-string">'longitude'</span>, HiddenType::class)
    ;
}
}
</code></pre>
    <p><a name="3.1.controller-handler-dataTransformer"></a></p>
    <h4>Cr√©ation de l'action de controller + Handler + DataTransformer</h4>
    <p>On va ensuite ajouter l'action d'ajout dans le controller <strong>EventController</strong>:</p>
    <pre><code class="php hljs"><br>    <span class="hljs-comment">/**
 * <span class="hljs-doctag">@Route</span>("/new")
 * <span class="hljs-doctag">@Method</span>(methods={"GET", "POST"})
 * <span class="hljs-doctag">@param</span> Request $request
 * <span class="hljs-doctag">@return</span> Response
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newAction</span><span class="hljs-params">(Request $request)</span>
</span>{
    $event = <span class="hljs-keyword">new</span> Event();
    $form = <span class="hljs-keyword">$this</span>-&gt;createForm(EventType::class, $event);
    <span class="hljs-keyword">if</span> ($request-&gt;isMethod(Request::METHOD_POST)) {
        $form-&gt;handleRequest($request);
        <span class="hljs-keyword">if</span> ($form-&gt;isValid()) {
            <span class="hljs-comment">//@todo Do something</span>
        }
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;render(<span class="hljs-string">'cms/event/new.html.twig'</span>, [
        <span class="hljs-string">'form'</span> =&gt; $form-&gt;createView()
    ]);
}
</code></pre>
    <p>et la vue associ√©e:</p>
    <pre><code class="twig hljs xml">{# app/Resources/views/cms/event/new.html.twig #}
            {% extends "::base.html.twig" %}

            {% block body %}
                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Proposez un √©v√©nement<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
{{ form_start(form) }}
    {{ form_row(form.title) }}
    {{ form_row(form.date) }}
    {{ form_widget(form.location) }}
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"previewMap"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 300px; height: 200px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    {{ form_rest(form) }}
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>/&gt;</span>
                {{ form_end(form) }}
            {% endblock %}

            {% block gmapExtraAttributes %}&amp;libraries=places&amp;callback=initMap{% endblock %}
            {% block javascripts %}
                {{ parent() }}
                <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initMap</span>(<span class="hljs-params"></span>) </span>{
        <span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> google.maps.Map(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'previewMap'</span>), {
            <span class="hljs-attr">center</span>: {<span class="hljs-attr">lat</span>: <span class="hljs-number">47.212205</span>, <span class="hljs-attr">lng</span>: <span class="hljs-number">-1.550555</span>},
            <span class="hljs-attr">zoom</span>: <span class="hljs-number">13</span>
        });
        <span class="hljs-keyword">var</span> input = <span class="hljs-comment">/** @type {!HTMLInputElement} */</span>(
            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'event_location_address'</span>));
        <span class="hljs-keyword">var</span> latInput = <span class="hljs-comment">/** @type {!HTMLInputElement} */</span>(
            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'event_location_latitude'</span>));
        <span class="hljs-keyword">var</span> longInput = <span class="hljs-comment">/** @type {!HTMLInputElement} */</span>(
            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'event_location_longitude'</span>));

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        <span class="hljs-keyword">var</span> autocomplete = <span class="hljs-keyword">new</span> google.maps.places.Autocomplete(input);
        autocomplete.bindTo(<span class="hljs-string">'bounds'</span>, map);

        <span class="hljs-keyword">var</span> infowindow = <span class="hljs-keyword">new</span> google.maps.InfoWindow();
        <span class="hljs-keyword">var</span> marker = <span class="hljs-keyword">new</span> google.maps.Marker({
            <span class="hljs-attr">map</span>: map,
            <span class="hljs-attr">anchorPoint</span>: <span class="hljs-keyword">new</span> google.maps.Point(<span class="hljs-number">0</span>, <span class="hljs-number">-29</span>)
        });

        autocomplete.addListener(<span class="hljs-string">'place_changed'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
            infowindow.close();
            <span class="hljs-keyword">var</span> place = autocomplete.getPlace();
            <span class="hljs-keyword">if</span> (!place.geometry) {
                <span class="hljs-comment">// User entered the name of a Place that was not suggested and</span>
                <span class="hljs-comment">// pressed the Enter key, or the Place Details request failed.</span>
                <span class="hljs-built_in">window</span>.alert(<span class="hljs-string">"No details available for input: '"</span> + place.name + <span class="hljs-string">"'"</span>);
                <span class="hljs-keyword">return</span>;
            }

            latInput.value = place.geometry.location.lat();
            longInput.value = place.geometry.location.lng();

            <span class="hljs-comment">// If the place has a geometry, then present it on a map.</span>
            <span class="hljs-keyword">if</span> (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } <span class="hljs-keyword">else</span> {
                map.setCenter(place.geometry.location);
                map.setZoom(<span class="hljs-number">17</span>);  <span class="hljs-comment">// Why 17? Because it looks good.</span>
            }

            <span class="hljs-keyword">var</span> address = <span class="hljs-string">''</span>;
            <span class="hljs-keyword">if</span> (place.address_components) {
                address = [
                    (place.address_components[<span class="hljs-number">0</span>] &amp;&amp; place.address_components[<span class="hljs-number">0</span>].short_name || <span class="hljs-string">''</span>),
                    (place.address_components[<span class="hljs-number">1</span>] &amp;&amp; place.address_components[<span class="hljs-number">1</span>].short_name || <span class="hljs-string">''</span>),
                    (place.address_components[<span class="hljs-number">2</span>] &amp;&amp; place.address_components[<span class="hljs-number">2</span>].short_name || <span class="hljs-string">''</span>)
                ].join(<span class="hljs-string">' '</span>);
            }

            infowindow.setContent(<span class="hljs-string">'&lt;div&gt;&lt;strong&gt;'</span> + place.name + <span class="hljs-string">'&lt;/strong&gt;&lt;br&gt;'</span> + address);
            infowindow.open(map, marker);
        });
    }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
            {% endblock %}
</code></pre>
    <p>Pour traiter le formulaire et ne pas outrepasser la responsabilit√© du controller, on va cr√©er un service responsable de cr√©er un √©v√©nement √† partir d'un formulaire: <strong>AddEventHandler</strong>.</p>
    <p>Ce service utilisera un <strong>DataTransformer</strong> qu'il faudra aussi cr√©er pour transformer l'<strong>√âv√©nement</strong> en <strong>Entry</strong> et utilisera ensuite le service <strong>Contentful\Management\Client</strong> pour envoyer l'<strong>Entry</strong> √† Contentful:</p>
    <pre><code class="php hljs"><span class="hljs-comment">#src/AppBundle/Domain/Transformer</span>
<span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">namespace</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Domain</span>\<span class="hljs-title">Transformer</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Domain</span>\<span class="hljs-title">Model</span>\<span class="hljs-title">Event</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Contentful</span>\<span class="hljs-title">Management</span>\<span class="hljs-title">Resource</span>\<span class="hljs-title">Entry</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">Form</span>\<span class="hljs-title">DataTransformerInterface</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">HttpFoundation</span>\<span class="hljs-title">RequestStack</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventToEntryTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DataTransformerInterface</span>
</span>{
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@var</span> RequestStack
 */</span>
<span class="hljs-keyword">private</span> $requestStack;

<span class="hljs-comment">/**
 * EventToEntryTransformer constructor.
 * <span class="hljs-doctag">@param</span> RequestStack $requestStack
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(RequestStack $requestStack)</span>
</span>{
    <span class="hljs-keyword">$this</span>-&gt;requestStack = $requestStack;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param</span> Event $event
 * <span class="hljs-doctag">@return</span> Entry
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">transform</span><span class="hljs-params">($event)</span>
</span>{
    $locale = <span class="hljs-keyword">$this</span>-&gt;requestStack-&gt;getCurrentRequest()-&gt;getLocale();
    $entry = <span class="hljs-keyword">new</span> Entry(<span class="hljs-string">'event'</span>);
    $entry-&gt;setField(<span class="hljs-string">'title'</span>, $locale, $event-&gt;getTitle());
    $entry-&gt;setField(<span class="hljs-string">'date'</span>, $locale, $event-&gt;getDate()-&gt;format(<span class="hljs-string">'c'</span>));
    $entry-&gt;setField(<span class="hljs-string">'location'</span>, $locale, [
        <span class="hljs-string">"lat"</span> =&gt; $event-&gt;getLatitude(),
        <span class="hljs-string">"lon"</span> =&gt; $event-&gt;getLongitude()
    ]);
    $entry-&gt;setField(<span class="hljs-string">'description'</span>, $locale, $event-&gt;getDescription());
    $entry-&gt;setField(<span class="hljs-string">'tags'</span>, $locale, $event-&gt;getTags());
    $entry-&gt;setField(<span class="hljs-string">'link'</span>, $locale, $event-&gt;getLink());
    $entry-&gt;setField(<span class="hljs-string">'slug'</span>, $locale, uniqid(<span class="hljs-string">'event_'</span>, <span class="hljs-keyword">true</span>));

    <span class="hljs-keyword">return</span> $entry;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@param</span> Entry $entry
 * <span class="hljs-doctag">@return</span> Event
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverseTransform</span><span class="hljs-params">($entry)</span>
</span>{
    $locale = <span class="hljs-keyword">$this</span>-&gt;requestStack-&gt;getCurrentRequest()-&gt;getLocale();
    $event = <span class="hljs-keyword">new</span> Event();
    $event-&gt;setTitle($entry-&gt;getField(<span class="hljs-string">'title'</span>), $locale);
    $event-&gt;setDate($entry-&gt;getField(<span class="hljs-string">'date'</span>), $locale);
    $event-&gt;setLatitude($entry-&gt;getField(<span class="hljs-string">'location'</span>)-&gt;getField(<span class="hljs-string">'latitude'</span>), $locale);
    $event-&gt;setLongitude($entry-&gt;getField(<span class="hljs-string">'location'</span>)-&gt;getField(<span class="hljs-string">'longitude'</span>), $locale);
    $event-&gt;setDescription($entry-&gt;getField(<span class="hljs-string">'description'</span>), $locale);
    $event-&gt;setTags($entry-&gt;getField(<span class="hljs-string">'tags'</span>), $locale);
    $event-&gt;setLink($entry-&gt;getField(<span class="hljs-string">'link'</span>), $locale);

    <span class="hljs-keyword">return</span> $event;
}
}
</code></pre>
    <p>‚Ñπ <a href="https://www.contentful.com/developers/docs/concepts/data-model/">https://www.contentful.com/developers/docs/concepts/data-model/</a></p>
    <pre><code class="php hljs"><span class="hljs-comment">#src/AppBundle/Domain/Handler</span>
<span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">namespace</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Domain</span>\<span class="hljs-title">Handler</span>;

<span class="hljs-keyword">use</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Domain</span>\<span class="hljs-title">Model</span>\<span class="hljs-title">Event</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Domain</span>\<span class="hljs-title">Transformer</span>\<span class="hljs-title">EventToEntryTransformer</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Contentful</span>\<span class="hljs-title">Management</span>\<span class="hljs-title">Client</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddEventHandler</span>
</span>{
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@var</span> Client
 */</span>
<span class="hljs-keyword">private</span> $client;
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@var</span> EventToEntryTransformer
 */</span>
<span class="hljs-keyword">private</span> $transformer;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">(Client $client, EventToEntryTransformer $transformer)</span>
</span>{
    <span class="hljs-keyword">$this</span>-&gt;client = $client;
    <span class="hljs-keyword">$this</span>-&gt;transformer = $transformer;
}

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span><span class="hljs-params">(Event $event)</span> </span>{
    $entry = <span class="hljs-keyword">$this</span>-&gt;transformer-&gt;transform($event);
    <span class="hljs-keyword">$this</span>-&gt;client-&gt;entry-&gt;create($entry);
}
}
</code></pre>
    <p>Derni√®re √©tape, appeler ce handler lorsque le formulaire est valide:</p>
    <pre><code class="php hljs">...
<span class="hljs-keyword">use</span> <span class="hljs-title">AppBundle</span>\<span class="hljs-title">Domain</span>\<span class="hljs-title">Handler</span>\<span class="hljs-title">AddEventHandler</span>;
...
<span class="hljs-comment">/**
 * <span class="hljs-doctag">@Route</span>("/new")
 * <span class="hljs-doctag">@Method</span>(methods={"GET", "POST"})
 * <span class="hljs-doctag">@param</span> Request $request
 * <span class="hljs-doctag">@param</span> AddEventHandler $addEventHandler
 * <span class="hljs-doctag">@return</span> Response
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newAction</span><span class="hljs-params">(Request $request, AddEventHandler $addEventHandler)</span>
</span>{
    $event = <span class="hljs-keyword">new</span> Event();
    $form = <span class="hljs-keyword">$this</span>-&gt;createForm(EventType::class, $event);
    <span class="hljs-keyword">if</span> ($request-&gt;isMethod(Request::METHOD_POST)) {
        $form-&gt;handleRequest($request);
        <span class="hljs-keyword">if</span> ($form-&gt;isValid()) {
            $addEventHandler-&gt;handle($form);
            <span class="hljs-keyword">$this</span>-&gt;addFlash(<span class="hljs-string">'success'</span>, <span class="hljs-string">'Votre √©v√©nement a bien √©t√© enregistr√©, il sera visible apr√®s validation !'</span>);

            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;redirectToRoute(<span class="hljs-string">'homepage'</span>);
        }
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;render(<span class="hljs-string">'cms/event/new.html.twig'</span>, [
        <span class="hljs-string">'form'</span> =&gt; $form-&gt;createView()
    ]);
}
</code></pre>
    <p>D√©sormais, si on se rend sur <code>/event/new</code>, on a acc√®s au formulaire de d√©p√¥t d'un √©v√©nement et lorsqu'on le soumet, un √©v√©nement est ajout√© dans Contentful en brouillon.</p>
    <p>Il ne reste plus qu'a le valider. On peut imaginer que le <strong>AddEventHandler</strong> pourrait s'occuper de notifier la <em>room</em> Event dans le Slack de l'AFSY afin d'avoir une bonne r√©activit√© mais c'est hors sujet ;)</p>
    <p><a name="conclusion"></a></p>
    <h2>Conclusion</h2>
    <p>Nous ne sommes qu'au d√©but des CMS Headless mais on sent d√©j√† qu'il s'agit d'une solution plus adapt√©e au d√©veloppement applicatif moderne.</p>
    <p><a name="conclusion-bundle"></a></p>
    <h3>Le <a href="https://github.com/contentful/ContentfulBundle">bundle ContentfulBundle</a></h3>
    <p>Fonctionnel mais il semble √™tre encore un peu jeune. L'utilisation du client n'est pas des plus √©l√©gante et m√™me si le sdk fait un travail cons√©quent notamment avec l'objet <a href="https://github.com/contentful/contentful.php/blob/master/src/Delivery/DynamicEntry.php">DynamicEntry</a>, il faut l'abstraire dans des services m√©tiers, sp√©cialis√©s dans la r√©cup√©ration et la pr√©paration du contenu pour ne pas surcharger les <strong>Controllers</strong>.
        De plus, le bundle vient avec un <strong>Collector</strong> pour la <a href="https://symfony.com/doc/current/profiler/data_collector.html">WDT</a>:</p>
    <p><img src="https://tppr.s3.amazonaws.com/uploads/61dce631d7b2237f0ffc722c1ec8affc.png" alt="debug toolbar">
        <img src="https://tppr.s3.amazonaws.com/uploads/71b1850cb522359d2e2542fc8aa45328.png" alt="profiler"></p>
    <p>C'est plut√¥t sympa pour garder un oeil sur le nombre de requ√™tes effectu√©es pour chaque page.</p>
    <p>Et puis comme expliqu√© dans l'article, des √©volutions devraient arriver dans les semaines √† venir pour faciliter encore l'int√©gration des models avec Contentful.</p>
    <p><a name="conclusion-pricing"></a></p>
    <h3>Le prix</h3>
    <p>Cela ne vous aura pas √©chapp√©, en dehors de l'√©dition Developper, contentful n'est pas donn√©, loin de l√†:</p>
    <p><img src="https://images.contentful.com/ukmha2pdldgt/2yJZrN0zMciMcaGwAeMKyW/92463fa707fad81194e093561d7b3f09/ea97a8c3c19a4c0ef2e1f67954543a7b.png" alt="pricing"></p>
    <p>Cependant, m√™me l'offre Developper peut fonctionner pour des petits sites car le sdk PHP offre un syst√®me de cache permettant d'√©viter les appels trop fr√©quents en prod: <a href="https://www.contentful.com/developers/docs/php/tutorials/caching-in-the-php-cda-sdk/">https://www.contentful.com/developers/docs/php/tutorials/caching-in-the-php-cda-sdk/</a></p>
    <p><a name="conclusion-tests"></a></p>
    <h3>Et mes tests Behat üò∞</h3>
    <p>La r√©ponse apport√©e par la core team du sdk php est d'utiliser, comme eux, la librairie <a href="http://php-vcr.github.io/">PHP-VCR</a> qui permet d'enregistrer les appels API et de les enregistrer sur des cassettes (oui oui s√©rieux) afin de les rejouer dans les tests futurs en simulant les appels √† l'API contentful.</p>
    <p>Plus d'info ici: <a href="https://github.com/contentful/contentful.php/issues/170">Mock Client Call #170</a>.</p>
    <p>Allez sur ce, je vous souahite de belles f√™tes de fin d'ann√©es pleines de contenu (content full hum...) et je souhaite une bonne f√™te √† tous les Nicolas :).</p>
{% endblock %}

{% block article_avatar %}
    <img src="{{ asset('bundles/afsyfront/images/avent/2017/06/leny-bernard.jpg') }}" alt="Leny Bernard" />
{% endblock %}

{% block article_bio %}
    <h2>
        <a href="{% block author_url %}https://twitter.com/lenybernard{% endblock %}" target="_blank">
            {% block article_author %}Leny Bernard{% endblock %}
        </a>
    </h2>
    <p>
        Co-Fondateur / D√©veloppeur @
        <a target="_blank" href="https://troopers.agency">Troopers</a>.
    </p>
{% endblock %}
